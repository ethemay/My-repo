#######################################################################################################################
#######################################################################################################################
# Title:        PWM Distortion Toolkit for Standard Topologies
# Topic:        Power Electronics
# File:         calcFreq
# Date:         14.08.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.2
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np
from scipy.fft import fft


#######################################################################################################################
# Function
#######################################################################################################################
def calcFreq(s, xs, timeAc, timeDc):
    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    # ------------------------------------------
    # General
    # ------------------------------------------
    N = int(len(s))

    # ==============================================================================
    # Variables
    # ==============================================================================
    freqAc = {}
    freqDc = {}
    freqSw = {}

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # AC-Side
    # ==============================================================================
    # ------------------------------------------
    # Switching States
    # ------------------------------------------
    # Sequence
    Y = np.abs(fft(s) / N)[0:int(N / 2)]
    Y[1:-2] = 2 * Y[1:-2]
    freqSw['Sa'] = Y

    # Sampled Reference
    Y = np.abs(fft(xs) / N)[0:int(N / 2)]
    Y[1:-2] = 2 * Y[1:-2]
    freqSw['Xas'] = Y

    # ------------------------------------------
    # Phase
    # ------------------------------------------
    # Current
    Y = np.abs(fft(timeAc['i_a']) / N)[0:int(N / 2)]
    Y[1:-2] = 2 * Y[1:-2]
    freqAc['I_a'] = Y

    # Voltage
    Y = np.abs(fft(timeAc['v_a']) / N)[0:int(N / 2)]
    Y[1:-2] = 2 * Y[1:-2]
    freqAc['V_a'] = Y
    Y = np.abs(fft(timeAc['v_a0']) / N)[0:int(N / 2)]
    Y[1:-2] = 2 * Y[1:-2]
    freqAc['V_a0'] = Y

    # ==============================================================================
    # DC-Side
    # ==============================================================================
    # ------------------------------------------
    # DC-Link
    # ------------------------------------------
    # Current
    Y = np.abs(fft(timeDc['i_dc']) / N)[0:int(N / 2)]
    Y[1:-2] = 2 * Y[1:-2]
    freqDc['I_dc'] = Y

    # Voltage
    Y = np.abs(fft(timeDc['v_dc']) / N)[0:int(N / 2)]
    Y[1:-2] = 2 * Y[1:-2]
    freqDc['V_dc'] = Y

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return [freqSw, freqAc, freqDc]
