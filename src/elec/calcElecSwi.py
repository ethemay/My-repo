#######################################################################################################################
#######################################################################################################################
# Title:        PWM Distortion Toolkit for Standard Topologies
# Topic:        Power Electronics
# File:         calcElecSwi
# Date:         01.14.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np
import pandas as pd
from scipy import interpolate

#######################################################################################################################
# Function
#######################################################################################################################
def calcElecSwi(Vdc, Is, G, Tj, pos, para, setupPara):
    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    Vf = para['Swi']['Elec']['con']['Vf']
    Ron = para['Swi']['Elec']['con']['Ron']
    Vfd = para['Swi']['Elec']['con']['Vfd']
    RonD = para['Swi']['Elec']['con']['RonD']

    # ==============================================================================
    # Variables
    # ==============================================================================
    VfT = np.zeros(np.size(Is))
    VfD = np.zeros(np.size(Is))

    # ==============================================================================
    # Output
    # ==============================================================================
    out = pd.DataFrame(columns=['i_T','v_T','i_D','v_D'])

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Extract parameters
    # ==============================================================================
    # ------------------------------------------
    # Constant
    # ------------------------------------------
    if setupPara['Elec']['SwiMdl'] == "con":
        # IGBT
        if setupPara['Elec']['SwiType'] == "IGBT":
            VfT = Vf * np.ones(np.size(Is))
            VfD = Vfd * np.ones(np.size(Is))

        # MOSFET
        if setupPara['Elec']['SwiType'] == "MOSFET":
            VfT = Vf * np.ones(np.size(Is))
            VfD = Vfd * np.ones(np.size(Is))

    # ------------------------------------------
    # Piece-wise linear (tbi)
    # ------------------------------------------
    if setupPara['Elec']['SwiMdl'] == "pwl":
        # IGBT
        if setupPara['Elec']['SwiType'] == "IGBT":
            VfT = Vf + Ron * np.abs(Is)
            VfD = Vfd + RonD * np.abs(Is)

        # MOSFET
        if setupPara['Elec']['SwiType'] == "MOSFET":
            VfT = Ron * np.abs(Is)
            VfD = Vfd + RonD * np.abs(Is)
        
    # ------------------------------------------
    # Tabular
    # ------------------------------------------
    if setupPara['Elec']['SwiMdl'] == "tab":
        # IGBT
        if setupPara['Elec']['SwiType'] == "IGBT": 
            Vce_2d = interpolate.interp2d(para['Swi']['Elec']['vec']['Tj'].to_numpy(), para['Swi']['Elec']['vec']['If'].to_numpy(), para['Swi']['Elec']['tab']['Vf'].to_numpy(), kind='linear')
            Vfd_2d = interpolate.interp2d(para['Swi']['Elec']['vec']['Tj'].to_numpy(), para['Swi']['Elec']['vec']['Ifd'].to_numpy(), para['Swi']['Elec']['tab']['Vfd'].to_numpy(), kind='linear')

            for i in range(0, len(Is)):
                VfT[i] = Vce_2d(Tj, abs(Is[i]))
                VfD[i] = Vfd_2d(Tj, abs(Is[i]))

        # MOSFET
        if setupPara['Elec']['SwiType'] == "MOSFET":
            Vce_2d = interpolate.interp2d(para['Swi']['Elec']['vec']['Tj'].to_numpy(), para['Swi']['Elec']['vec']['If'].to_numpy(), para['Swi']['Elec']['tab']['Vf'].to_numpy(), kind='linear')
            Vfd_2d = interpolate.interp2d(para['Swi']['Elec']['vec']['Tj'].to_numpy(), para['Swi']['Elec']['vec']['Ifd'].to_numpy(), para['Swi']['Elec']['tab']['Vfd'].to_numpy(), kind='linear')

            for i in range(0, len(Is)):
                VfT[i] = Vce_2d(Tj, abs(Is[i]))
                VfD[i] = Vfd_2d(Tj, abs(Is[i]))


    # ==============================================================================
    # Parameterize PWM Method
    # ==============================================================================
    if setupPara['PWM']['type'] == 0:
        VfT = np.zeros(np.size(Is))
        VfD = np.zeros(np.size(Is))

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Transistor
    # ==============================================================================
    if pos == 'HS':
        v_T = Vdc * (~G).astype(float)
        v_T[Is>0] = v_T[Is>0] + (VfT[Is>0]) * (G[Is>0]).astype(float) + (VfD[Is>0]) * (~G[Is>0]).astype(float)
        v_T[Is<=0] = v_T[Is<=0] - (VfT[Is<=0]) * (~G[Is<=0]).astype(float) - (VfD[Is<=0]) * (G[Is<=0]).astype(float)
        i_T = Is * G.astype(float)
        i_T[Is<0] = 0     
    else:
        v_T = Vdc * (~G).astype(float)
        v_T[Is<=0] = v_T[Is<=0] + (VfT[Is<=0]) * (G[Is<=0]).astype(float) + (VfD[Is<=0]) * (~G[Is<=0]).astype(float)
        v_T[Is>0] = v_T[Is>0] - (VfT[Is>0]) * (~G[Is>0]).astype(float) - (VfD[Is>0]) * (G[Is>0]).astype(float)
        i_T = Is * G.astype(float) * (-1)
        i_T[Is>0] = 0

    # ==============================================================================
    # Diode
    # ==============================================================================
    if pos == 'HS':
        v_D = -v_T
        i_D = Is * G.astype(float) * (-1)
        i_D[Is>0] = 0
    else:     
        v_D = -v_T
        i_D = Is * G.astype(float)
        i_D[Is<0] = 0

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # Output
    # ==============================================================================
    # ------------------------------------------
    # Transistor
    # ------------------------------------------
    out['v_T'] = v_T / setupPara['Elec']['SwiSeries']
    out['i_T'] = i_T / setupPara['Elec']['SwiPara']

    # ------------------------------------------
    # Diode
    # ------------------------------------------
    out['v_D'] = v_D / setupPara['Elec']['SwiSeries']
    out['i_D'] = i_D / setupPara['Elec']['SwiPara']
    
    ###################################################################################################################
    # Return
    ###################################################################################################################
    return out